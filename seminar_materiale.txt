#include "pch.h";
#include<iostream>
#include<fstream>

using namespace std;

class Concurent {
private:
	char* nume;
	unsigned int numar;
	unsigned int nr_jurati;
	float* note;

public:
	Concurent();
	Concurent(char* v_nume, unsigned int v_numar, unsigned int v_nr_jurati, float* v_note);
	Concurent(const Concurent& concurent);
	Concurent& operator=(const Concurent& concurent);
	~Concurent();
	//operator de afisare 
	friend ostream& operator<<(ostream& out, Concurent concurent);
	//getteri
	char* getNume();
	unsigned int getNumar();
	unsigned int getNrJurati();
	float* getNote();

	//oper scriere citire fisier -ex fisier txt
	friend ifstream& operator>>(ifstream& in, Concurent& concurent);
	friend ofstream& operator<<(ofstream& out, Concurent& concurent);

};

int main() {

	Concurent c1;
	char nume[50];
	strcpy(nume, "Popescu Ion");
	float note[2] = { 8.7,10.0 };
	Concurent c2(nume, 2, 2, note);

	Concurent concurenti[2] = { c1,c2 };


	return 0;
}

Concurent::Concurent() {
	this->nume = new char[strlen("Anonim") + 1];
	strcpy(this->nume, "Anonim");
	this->numar = 0;
	this->nr_jurati = 0;
	this->note = NULL;
}
Concurent::Concurent(char* v_nume, unsigned int v_nr_concurs, unsigned int v_nr_jurati, float* v_note) {
	if (v_nume != NULL) {
		this->nume = new char[strlen(v_nume) + 1];
		strcpy(this->nume, v_nume);
	}
	else {
		this->nume = new char[strlen("NAN") + 1];
		strcpy(this->nume, "NAN");
	}

	this->numar = v_nr_concurs;
	this->nr_jurati = v_nr_jurati;
	if (this->nr_jurati > 0 && v_note != NULL) {

		this->note = new float[v_nr_jurati];

		for (int i = 0; i < this->nr_jurati; i++) {
			this->note[i] = v_note[i];
		}
	}
}

Concurent::Concurent(const Concurent& concurent) {

	this->nume = new char[strlen(concurent.nume) + 1];
	strcpy(this->nume, concurent.nume);

	this->numar = concurent.numar;
	this->nr_jurati = concurent.nr_jurati;
	this->note = new float[nr_jurati];
	for (int i = 0; i < this->nr_jurati; i++) {
		this->note[i] = concurent.note[i];
	}
}

Concurent& Concurent::operator=(const Concurent& concurent) {

	if (this->nume != NULL) {
		delete[] this->nume;
	}

	this->nume = new char[strlen(concurent.nume) + 1];
	strcpy(this->nume, concurent.nume);

	this->numar = concurent.numar;
	this->nr_jurati = concurent.nr_jurati;

	if (this->note != NULL) {
		delete[] this->note;
	}
	this->note = new float[nr_jurati];
	for (int i = 0; i < this->nr_jurati; i++) {
		this->note[i] = concurent.note[i];
	}

	return *this;
}

Concurent::~Concurent() {
	cout << "Apel destructor" << endl;

	if (this->nume != NULL) {
		delete[] this->nume;
	}
	if (this->note != NULL && this->nr_jurati > 0) {
		delete[] this->note;
	}
}

ostream& operator<<(ostream& out, Concurent concurent) {

	out << "Nume: " << concurent.nume << endl;
	out << "Numar concurs: " << concurent.numar << endl;
	out << "Numar de jurati: " << concurent.nr_jurati << endl;
	out << "Note: " << endl;
	for (int i = 0; i < concurent.nr_jurati; i++) {
		out << "nota " << (i + 1) << ": " << concurent.note[i] << endl;
	}

	return out;
}

char* Concurent::getNume() {
	return this->nume;
}

unsigned int Concurent::getNumar() {
	return this->numar;
}

unsigned int Concurent::getNrJurati() {
	return this->nr_jurati;
}

float* Concurent::getNote() {
	return this->note;
}